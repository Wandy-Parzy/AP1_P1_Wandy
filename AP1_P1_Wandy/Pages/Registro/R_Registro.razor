@page "/R_Registro"
@inject RegistroBLL registroBLL
@inject NotificationService NotificationService

 <EditForm Model="registro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">
            <h3>Registro</h3>
        </div>
        <div class="card-body">

            @*PersonaId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="mb-3">
                        <label>AporteId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="registro.AportesId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

               

            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]

       public Registro registro { get; set; } = new Registro();
        public int registroId { get; set; }

        public List<Registro> lista = new List<Registro>();
            
  protected override void OnInitialized()
    {
        if (registroId > 0)
        {
            this.registro.AportesId = registroId;
            this.Buscar();

        }
    }

         public void Guardar()
    {
 
        bool guardado = registroBLL.Guardar(registro);
        if (guardado)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {

        }
    }


    private void Buscar()
    {
        if (registro.AportesId > 0 )
        {
            var encontrado = registroBLL.Buscar(registro.AportesId);

            if (encontrado != null)
                this.registro = encontrado;
        }
    }

    /* bool Validar()
    {
      //  return registro.registro.Contains();
    }
*/
    public void Nuevo()
    {
        registro = new Registro();
    }


    public void Eliminar()
    {
        bool elimino;

        elimino = registroBLL.Eliminar(registro);

        if (elimino)
        {
            Nuevo();
        }
    }

   void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

}
