@page "/R_Aportes"
@inject AportesBLL aportesBLL
@inject NotificationService NotificationService

 <EditForm Model="aportes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">
            <h3>Registro de aportes</h3>
        </div>
        <div class="card-body">

            @*PersonaId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="mb-3">
                        <label>AportesId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="aportes.AportesId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            @*Fecha*@
            <div class="mb-3">
                <label>Fecha</label>
                 <InputDate @bind-Value="aportes.Fecha" class="form-control col-4" />
                    <div class ="form-control"/>
                 <ValidationMessage For = "@(() => aportes.Fecha)"/>
            </div>
            
            @*Persona*@
            <div class="mb-3">
                <label>Persona</label>
                <InputText @bind-Value="aportes.Persona" class="form-control col-4" />
                <ValidationMessage For = "@(() => aportes.Fecha)"/>
            </div>

            @*Observacion*@
              <div class="mb-3">
                <label>Observaci√≥n</label>
                <InputText @bind-Value="aportes.Observacion" class="form-control col-4" />
                <ValidationMessage For = "@(() => aportes.Observacion)"/>
            </div>

             @*Monto*@
             <div class="mb-3">
                <label>Monto</label>
                <InputNumber @bind-Value="aportes.Monto" class="form-control col-4" />
                <ValidationMessage For = "@(() => aportes.Monto)"/>
            </div>

            </div>
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]

       public Aportes aportes { get; set; } = new Aportes();
        public int registroId { get; set; }

        public List<Aportes> lista = new List<Aportes>();
            
  protected override void OnInitialized()
    {
        if (registroId > 0)
        {
            this.aportes.AportesId = registroId;
            this.Buscar();

        }
    }

         public void Guardar()
    {
 
        bool guardado = aportesBLL.Guardar(aportes);
        if (guardado)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
        }
        else
        {

        }
    }


    private void Buscar()
    {
        if (aportes.AportesId > 0 )
        {
            var encontrado = aportesBLL.Buscar(aportes.AportesId);

            if (encontrado != null)
                this.aportes = encontrado;
        }
    }

    /* bool Validar()
    {
      //  return aportes.aportes.Contains();
    }
*/
    public void Nuevo()
    {
        aportes = new Aportes();
    }


    public void Eliminar()
    {
        bool elimino;

        elimino = aportesBLL.Eliminar(aportes);

        if (elimino)
        {
            Nuevo();
        }
    }

   void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }

}
